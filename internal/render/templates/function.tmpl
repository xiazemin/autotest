{{define "function"}}
{{- $f := .}}

func {{.TestName}}(t *testing.T) {
	{{- with .Receiver}}
		{{- if .IsStruct}}
			{{- if .Fields}}
				type fields struct {
				{{- range .Fields}}
				    {{- if .IsInterface}}
					   {{Field .}} *mock_{{.InterfacesInfo.PkgName}}.Mock{{.InterfacesInfo.Name}}
					{{- else}}
					  {{Field .}} {{.Type}}
					{{- end}}
				{{- end}}
				}
			{{- end}}
		{{- end}}
	{{- end}}
	{{- if .TestParameters}}
	type args struct {
		{{- range .TestParameters}}
				{{Param .}} {{.Type}}
		{{- end}}
	}
	{{- end}}
	tests := {{ if .Named}}map[string]struct{{else}}[]struct{{end}} {
		{{ if (not .Named)}}name string{{end}}
		{{- with .Receiver}}
			{{- if and .IsStruct .Fields}}
				fields fields
				prepare func(fields *fields, args *args,mock redismock.ClientMock)
			{{- else}}
				{{Receiver .}} {{.Type}}
			{{- end}}
		{{- end}}
		{{- if .TestParameters}}
			args args
		{{- end}}
		{{- range .TestResults}}
			{{Want .}} {{.Type}}
		{{- end}}
		{{- if .ReturnsError}}
			wantErr bool
		{{- end}}
	}{
		// TODO: Add test cases.
		{
		name: "case1",
		{{with .Receiver -}}
		    {{$Fields:= .Fields}}
			{{- if and .IsStruct .Fields -}}
				fields: fields{
					{{- range $Fields}}
				    {{- if .IsInterface}}
					{{- else}}
					  {{Field .}}:{{(defaultVal .Type)}},// {{.Type}}
					{{- end}}
				{{- end}}
				},
			{{- else}}
				{{Receiver .}}:{{(defaultVal .Type)}},// {{.Type}}
			{{- end}}
		{{- end}}
		{{- if .TestParameters}}
			args:args{
				{{- range .TestParameters}}
					{{Param .}} :{{(defaultVal .Type)}},//{{.Type}}
				{{- end}}
			},
		{{- end}}
		{{- range .TestResults}}
			{{Want .}} :{{(defaultVal .Type)}},//{{.Type}},
		{{- end}}
		{{- if .ReturnsError}}
			wantErr:false,
		{{- end}}
		{{with .Receiver -}}
		    {{- if .IsStruct -}}
			  {{- if .Fields -}}
				prepare: func(fields *fields, args *args,mock redismock.ClientMock) {
				//httpmock.RegisterResponder("GET", "https://mytest.com/httpmock", httpmock.NewStringResponder(200, `[{"id": 1, "name": "My Great Test"}]`))
			    //mock.ExpectGet("prefix:10").RedisNil()
				// mock.Regexp().ExpectSet(key, `[a-z]+`, 30*time.Minute).SetErr(errors.New("FAIL"))
				gomock.InOrder(
				{{range .Fields}}
				    {{- if .IsInterface -}}
					   {{$F:=Field .}}
					   {{- range .InterfacesInfo.MethodInfoList -}}
//fields.{{$F}}.EXPECT().{{.Name}}({{$plen:=(len .Params)}} {{- range $ip, $vp := .Params -}}
{{(defaultValByName $vp)}}{{if gt $plen (add $ip 1)}},{{end}}
{{- end -}}).Return({{$rlen:=(len .Return)}} {{- range $ir,$vr := .Return -}}
{{(defaultValByName $vr)}}{{if gt $rlen (add $ir 1)}},{{end}} 
{{- end}}).AnyTimes(),  //params:{{- range .Params -}} {{.}} {{end}};  return:{{- range .Return -}} {{.}} {{end}}
					   {{end}}
					{{- end}}
			    {{- end -}}
			     )
				},
			  {{end -}}
			{{- end -}}
		{{- end -}}
		},

	}
	for {{if (or .Subtests (not .IsNaked))}} {{if .Named}}name{{else}}_{{end}}, tt := {{end}} range tests {
		tt:=tt
		ctrl := gomock.NewController(t)
		defer ctrl.Finish()
		httpmock.Activate()
		//db, mock := redismock.NewClientMock()
		//把 db赋值给redis client github.com/go-redis/redis/v8
		_,mock:=redismock.NewClientMock()
	    {{- with .Receiver}}
		    {{- if .IsStruct}}
			  {{- if .Fields}}
				{{- range .Fields}}
				    {{- if .IsInterface}}
					   tt.fields.{{Field .}} = mock_{{.InterfacesInfo.PkgName}}.NewMock{{.InterfacesInfo.Name}}(ctrl){{end}}{{end}}
				if tt.prepare != nil {
				  tt.prepare(&tt.fields, &tt.args,mock)
				}
			  {{end}}
			{{end}}
		{{end}}
		{{- if .Subtests}}
		{{- if .Parallel}}tt := tt;{{end}}
		{{- if and .Parallel .Named}}name := name;{{ end }}
		t.Run({{if .Named}}name{{else}}tt.name{{end}}, func(t *testing.T) {
			{{- if .Parallel}}t.Parallel(){{end}}
		{{- end}}
			{{- with .Receiver}}
				{{- if .IsStruct}}
					{{Receiver .}} := {{if .Type.IsStar}}&{{end}}{{.Type.Value}}{
					{{- range .Fields}}
						{{.Name}}: tt.fields.{{Field .}},
					{{- end}}
					}
				{{- end}}
			{{- end}}
			{{- range .Parameters}}
				{{- if .IsWriter}}
					{{Param .}} := &bytes.Buffer{}
				{{- end}}
			{{- end}}
			{{- if and (not .OnlyReturnsError) (not .OnlyReturnsOneValue) }}
				{{template "results" $f}} {{template "call" $f}}
			{{- end}}
			{{- if .ReturnsError}}
				if {{if .OnlyReturnsError}} err := {{template "call" $f}}; {{end}} (err != nil) != tt.wantErr {
					t.Errorf("{{template "message" $f}} error = %v, wantErr %v", {{template "inputs" $f}} err, tt.wantErr)
					{{- if .TestResults}}
						{{if .Subtests }}return{{else}}continue{{end}}
					{{- end}}
				}
			{{- end}}
			{{- range .TestResults}}
				{{- if .IsWriter}}
					if {{Got .}} := {{Param .}}.String(); {{Got .}} != tt.{{Want .}} {
				{{- else if .IsBasicType}}
					if {{if $f.OnlyReturnsOneValue}}{{Got .}} := {{template "inline" $f}}; {{end}} {{Got .}} != tt.{{Want .}} {
				{{- else}}
					if {{if $f.OnlyReturnsOneValue}}{{Got .}} := {{template "inline" $f}}; {{end}} !reflect.DeepEqual({{Got .}}, tt.{{Want .}}) {
				{{- end}}
				t.Errorf("{{template "message" $f}} {{if $f.ReturnsMultiple}}{{Got .}} {{end}}= %v, want %v", {{template "inputs" $f}} {{Got .}}, tt.{{Want .}})
				}
			{{- end}}
		{{- if .Subtests }} }) {{end}}
		if err := mock.ExpectationsWereMet(); err != nil {
			t.Error(err)
		}
		httpmock.DeactivateAndReset()
	}
}

{{end}}
