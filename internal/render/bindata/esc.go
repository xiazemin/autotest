// Code generated by "esc -o bindata/esc.go -pkg=bindata templates"; DO NOT EDIT.

package bindata

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/call.tmpl": {
		name:    "call.tmpl",
		local:   "templates/call.tmpl",
		size:    241,
		modtime: 1617338274,
		compressed: `
H4sIAAAAAAAC/0SOQWrDQAxFryKMFy0YHaDQA3hTSlvatRjLrsCeFo2SEITuHsY4mdWHP2/el/vEs2SG
LtG6dhHuF7FfwA9OLGfW2sgM+c8Ax/JpekoWYYbunKf6eicBI1qLb7RxxJO7Ul4Yehmg5xVeXgHfSWlj
Yy2HvZeIAR5/296PitUbzJB0KU2/K+riTuPX9Z9xLN+kQpOkCMTG7vF85C0AAP//ZQi8iPEAAAA=
`,
	},

	"/templates/function.tmpl": {
		name:    "function.tmpl",
		local:   "templates/function.tmpl",
		size:    3792,
		modtime: 1617463199,
		compressed: `
H4sIAAAAAAAC/7RX3W/bNhB/tv+Kq5EWUqCy2B4d+GFt0yHAmgRJsA4ohkKRT44QmfLIU4KA4P8+HElJ
lD+SYB8vlnTkff5+d6SNWWJZSYRZ2cqCqkbOrJ0a8x6OSpgvQFg7nfISGCNuUNN5vkZrE4JjQk2VXImb
FMx0wiqPFd2BuMICqwdU1k4nTlyVIM70Nam2ICfspV8qrJfayyb0tEEonQS028x2w26VyxVuKQAADPbP
JKEq8wLD6sStOgXOAo7XTXH/wxjRb9RnsmzE5f3K5yS+NsX97rpf9CaNwVpHDmL7XJ+nTbxVLsMHBzl8
9RXoRNH71itnxkW/zFW+RkLlUneFytVqVKaoSLsazqET7YQaeRz7Z3g1U8AYFwfXYWntOt9816QqufrT
e+9q8n34ZgMhKFZNZENBP7VW5msEb2Go0QH2dEXI5XKg0BYLAmP8w0k2Cje5QmDaJmH52D8zX7dj/k17
HAZMjen872J6ALJngJpMnDf+2aMToXWFuq1Jd36+5ZKeA6p3eYXUKqlPlWpCwR5zSadKwW3T1FvoMiAf
PsDNxeeLOfyyXAIjDEWuUQveyuoMzhxmLPxplh0GZtx6cWsP8hFKAZP5i6CEnl813K7iTF6oJarkX8+B
oy/zRd+rkby3uNX1X5HumiW//lZpilQgME2wTWvF6R+Xp59uklQYE0ZFEll1fNDWGiOszbyRCQTepwG/
WMFLDircVGvUyc9pFqUwTJZ46MB4zUWe+vmTdTj1q3Ejdm+8zU4nZaPAGO7iRoG4bm/9XPA9fabP83tc
pqnjajQlmEfdYPgRbGZA5OeJHxA+Y2+OQSeaL4imk0lBquaNgQPn+PipkaSaukaVECexxBIV8D7xpZKV
vkvSaU+D/4Ku/5xqRKInyHA4LODF0+ccH587gBLONg21i0GvSvbZzbw3C5BVHZoIopXkXR9ZBvzej8CJ
fRUfurQ7CoyEzPO6xtpajzHRyY6mG+LdxhFTWIOfJ8bwtAKnReKq5dY4wCoiET49t9xc2bmV7I2wf0/S
cZBR/vuPowPXmZ1zw7HcnQlPG3Sbc2Xtux49L/89r1u01nQm9lOOVwIH5vvZlQ0Golmw5+qx8xFPqfFl
oUvzm6qoz350iZgv4N3tE6EWH9uyRGVe4zDQwE+PC1k/xSdYuiu/kOiqlEIfGeF6U+eEMFP+1JzBUenm
z7BS5HXtxYei2HN0cid51LYDsxZQKY/qPicn/UxLeJ/vwZSfRKI7kQPMJJzJMpnFttaodb7CkAryDljA
24cMOvW3D7Ns5L6Sm7ZPHpXKImfpwIjuZjK6Yri1uJnBWuUS7tqraCRVssWt4+XZe+yzt5qDnHJV/7Wh
oXF6jolrd01M0pNoi69qfEkaeFdrDD4+5roq4vt4B+5RuY9f3JSjGOI615XEbaBfHc//5P+NwrLGgsRn
xM3pX21eJ72FbBxQGkfUo/caHnYBh2C/tjVVm3oUbIhn4OoLRD0Y5OG/Rls8BU7Ib4H3/m+LnU47nv4d
AAD//1GBq7LQDgAA
`,
	},

	"/templates/header.tmpl": {
		name:    "header.tmpl",
		local:   "templates/header.tmpl",
		size:    262,
		modtime: 1617444815,
		compressed: `
H4sIAAAAAAAC/2SOMW7EIBBFe04xokqK4EOkchOlSB/NwhgjG7AwW43m7iuwvVssFZr/3tdndjSFRKBn
QkdFiyjmgskTmO8cI6W6izCbHlBy8CWiNrQLegJm83t8RZQKcculwserYeyXXUQBQKN/MJII6C7WWUSf
SZjAjPuYKpUJLZ1GezHb5Z/Z/GFY3/ShpVcHJXetbHO0D3W+34zNcfB5xeQ7Pfh8SJ9P9BEAAP//6YLz
QwYBAAA=
`,
	},

	"/templates/inline.tmpl": {
		name:    "inline.tmpl",
		local:   "templates/inline.tmpl",
		size:    49,
		modtime: 1617338274,
		compressed: `
H4sIAAAAAAAC/6quTklNy8xLVVDKzMvJzEtVqq1VqK4uSc0tyEksSVVQSk7MyVFS0AOLpual1NYCAgAA
//+q60H/MQAAAA==
`,
	},

	"/templates/inputs.tmpl": {
		name:    "inputs.tmpl",
		local:   "templates/inputs.tmpl",
		size:    177,
		modtime: 1617338274,
		compressed: `
H4sIAAAAAAAC/0yNMaoDMQxE+38KsWz58QECOUCaEMgJFCwvLqwESVsJ3T1YpHAlzWN4416pdSbYOn9O
0y3CfW9wuUKZb2/Ab4PyPF9GarqyOw6qEWbFnbhGMA76h1/I3t7KQzrbLeUTCvJByVFwkJFoKlAOLe5J
5/TiWc/fNwAA//94+RPrsQAAAA==
`,
	},

	"/templates/message.tmpl": {
		name:    "message.tmpl",
		local:   "templates/message.tmpl",
		size:    201,
		modtime: 1617338274,
		compressed: `
H4sIAAAAAAAC/zyN4WqDQBCE//sUiyi0oPsAhT5A/xRpS/9f4mgW9GLuTkNY9t2DB/HXDDPDN6o9BvGg
ckaMbkRJrVmhKgP5ayL+XU8JMUWz+sakCt+bqd4lXYh/cIZsCHvCf48F/O+mFWZ8DPnbzTB7y0Tugvj0
5Zd1B6oG50dQJQ1VmOjjk7hzwc1ICLmXgSoxa16/9XZws7wXqi1l+wwAAP//kC65UskAAAA=
`,
	},

	"/templates/results.tmpl": {
		name:    "results.tmpl",
		local:   "templates/results.tmpl",
		size:    168,
		modtime: 1617338274,
		compressed: `
H4sIAAAAAAAC/1yNTQrCQAyFr/Iosyw9gOBS3HsDoRkJlAy8ma5C7i6pRcFVfr4vee6rVDXBROn7NvoU
AXc+7SUoOqPIhssVy+ODI9y1omjEDHexNTf3NrBkc85a82DstH4jG1MW8uQ4hMbv0385A3/uUd8BAAD/
/7BPz2GoAAAA
`,
	},

	"/templates": {
		name:  "templates",
		local: `templates`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"templates": {
		_escData["/templates/call.tmpl"],
		_escData["/templates/function.tmpl"],
		_escData["/templates/header.tmpl"],
		_escData["/templates/inline.tmpl"],
		_escData["/templates/inputs.tmpl"],
		_escData["/templates/message.tmpl"],
		_escData["/templates/results.tmpl"],
	},
}
