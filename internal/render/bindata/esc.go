// Code generated by "esc -o bindata/esc.go -pkg=bindata templates"; DO NOT EDIT.

package bindata

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/call.tmpl": {
		name:    "call.tmpl",
		local:   "templates/call.tmpl",
		size:    241,
		modtime: 1617338274,
		compressed: `
H4sIAAAAAAAC/0SOQWrDQAxFryKMFy0YHaDQA3hTSlvatRjLrsCeFo2SEITuHsY4mdWHP2/el/vEs2SG
LtG6dhHuF7FfwA9OLGfW2sgM+c8Ax/JpekoWYYbunKf6eicBI1qLb7RxxJO7Ul4Yehmg5xVeXgHfSWlj
Yy2HvZeIAR5/296PitUbzJB0KU2/K+riTuPX9Z9xLN+kQpOkCMTG7vF85C0AAP//ZQi8iPEAAAA=
`,
	},

	"/templates/function.tmpl": {
		name:    "function.tmpl",
		local:   "templates/function.tmpl",
		size:    5352,
		modtime: 1643366997,
		compressed: `
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
AAAA//8cA4wN6BQAAA==
`,
	},

	"/templates/header.tmpl": {
		name:    "header.tmpl",
		local:   "templates/header.tmpl",
		size:    143,
		modtime: 1617715414,
		compressed: `
H4sIAAAAAAAC/0TMMQoCMRCF4X5OMaTSwlzCyka8wmCeu4tkdonphnd3IUHsfmZ4X0TBa3NoWmEFLZES
0cwXaL7utcL7h4zI4wEveiHlsOfbFmhEfswkRbZ67K3r6S/cxmUCd6sgNY1NX8k0QVLOv/oGAAD//1fU
3eyPAAAA
`,
	},

	"/templates/inline.tmpl": {
		name:    "inline.tmpl",
		local:   "templates/inline.tmpl",
		size:    49,
		modtime: 1617338274,
		compressed: `
H4sIAAAAAAAC/6quTklNy8xLVVDKzMvJzEtVqq1VqK4uSc0tyEksSVVQSk7MyVFS0AOLpual1NYCAgAA
//+q60H/MQAAAA==
`,
	},

	"/templates/inputs.tmpl": {
		name:    "inputs.tmpl",
		local:   "templates/inputs.tmpl",
		size:    177,
		modtime: 1617338274,
		compressed: `
H4sIAAAAAAAC/0yNMaoDMQxE+38KsWz58QECOUCaEMgJFCwvLqwESVsJ3T1YpHAlzWN4416pdSbYOn9O
0y3CfW9wuUKZb2/Ab4PyPF9GarqyOw6qEWbFnbhGMA76h1/I3t7KQzrbLeUTCvJByVFwkJFoKlAOLe5J
5/TiWc/fNwAA//94+RPrsQAAAA==
`,
	},

	"/templates/message.tmpl": {
		name:    "message.tmpl",
		local:   "templates/message.tmpl",
		size:    201,
		modtime: 1617338274,
		compressed: `
H4sIAAAAAAAC/zyN4WqDQBCE//sUiyi0oPsAhT5A/xRpS/9f4mgW9GLuTkNY9t2DB/HXDDPDN6o9BvGg
ckaMbkRJrVmhKgP5ayL+XU8JMUWz+sakCt+bqd4lXYh/cIZsCHvCf48F/O+mFWZ8DPnbzTB7y0Tugvj0
5Zd1B6oG50dQJQ1VmOjjk7hzwc1ICLmXgSoxa16/9XZws7wXqi1l+wwAAP//kC65UskAAAA=
`,
	},

	"/templates/results.tmpl": {
		name:    "results.tmpl",
		local:   "templates/results.tmpl",
		size:    168,
		modtime: 1617338274,
		compressed: `
H4sIAAAAAAAC/1yNTQrCQAyFr/Iosyw9gOBS3HsDoRkJlAy8ma5C7i6pRcFVfr4vee6rVDXBROn7NvoU
AXc+7SUoOqPIhssVy+ODI9y1omjEDHexNTf3NrBkc85a82DstH4jG1MW8uQ4hMbv0385A3/uUd8BAAD/
/7BPz2GoAAAA
`,
	},

	"/templates": {
		name:  "templates",
		local: `templates`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"templates": {
		_escData["/templates/call.tmpl"],
		_escData["/templates/function.tmpl"],
		_escData["/templates/header.tmpl"],
		_escData["/templates/inline.tmpl"],
		_escData["/templates/inputs.tmpl"],
		_escData["/templates/message.tmpl"],
		_escData["/templates/results.tmpl"],
	},
}
